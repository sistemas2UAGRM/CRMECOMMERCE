# api/v1/common/views/stats_views.py

"""
游늳 VIEWS DE ESTAD칈STICAS - M칄TRICAS DEL SISTEMA

Views especializadas para generaci칩n de estad칤sticas:
- M칠tricas generales del sistema
- An치lisis de actividad por per칤odos
- Estad칤sticas por usuarios y roles
- Comparaciones entre per칤odos

Casos de uso implementados:
- CU-CM04: Estad칤sticas generales del sistema
- CU-CM05: An치lisis de actividad por per칤odos
- CU-CM06: Estad칤sticas por usuario y rol
"""

from rest_framework.views import APIView
from rest_framework import permissions, status
from rest_framework.response import Response
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi

from ..services import StatsService
from ...common.mixins import AuditMixin, PermissionMixin, IPMixin


class StatsView(AuditMixin, PermissionMixin, IPMixin, APIView):
    """
    CU-CM04, CU-CM05, CU-CM06: Vista para estad칤sticas del sistema.
    
    Endpoint especializado para m칠tricas y an치lisis:
    - Estad칤sticas generales del sistema
    - Comparaciones entre per칤odos
    - An치lisis por usuarios y roles
    - Solo para administradores y supervisores
    """
    
    permission_classes = [permissions.AllowAny]
    audit_action_prefix = "Stats"
    
    def get_permissions(self):
        """Permisos liberados - acceso p칰blico a todas las funciones"""
        return [permissions.AllowAny()]
    
    @swagger_auto_schema(
        operation_description="Obtener estad칤sticas generales del sistema",
        responses={
            200: openapi.Response(
                description='Estad칤sticas del sistema',
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'resumen_general': openapi.Schema(
                            type=openapi.TYPE_OBJECT,
                            properties={
                                'total_registros': openapi.Schema(type=openapi.TYPE_INTEGER),
                                'registros_hoy': openapi.Schema(type=openapi.TYPE_INTEGER),
                                'registros_semana': openapi.Schema(type=openapi.TYPE_INTEGER),
                                'registros_mes': openapi.Schema(type=openapi.TYPE_INTEGER)
                            }
                        ),
                        'usuarios_activos': openapi.Schema(type=openapi.TYPE_OBJECT),
                        'acciones_populares': openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Schema(type=openapi.TYPE_OBJECT)
                ),
                        'tendencias': openapi.Schema(type=openapi.TYPE_OBJECT)
                    }
                )
            )
        },
        tags=['Estad칤sticas']
    )
    def get(self, request):
        """
        CU-CM04: Obtener estad칤sticas generales del sistema.
        """
        try:
            # Usar servicio para obtener estad칤sticas
            stats = StatsService.get_system_overview_stats()
            
            # Auditor칤a
            self.log_audit_action("Consulta estad칤sticas generales del sistema")
            
            return Response({
                'fecha_consulta': request._request.META.get('HTTP_DATE', ''),
                'usuario_consulta': request.user.username,
                'estadisticas': stats
            })
            
        except Exception as e:
            return Response(
                {'error': f'Error al obtener estad칤sticas: {str(e)}'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    @swagger_auto_schema(
        operation_description="Obtener estad칤sticas de actividad por usuario",
        operation_id='stats_users',
        manual_parameters=[
            openapi.Parameter(
                'days',
                openapi.IN_QUERY,
                description="D칤as hacia atr치s (por defecto 30)",
                type=openapi.TYPE_INTEGER,
                default=30
            )
        ],
        responses={
            200: openapi.Response(
                description='Estad칤sticas por usuario',
                schema=openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Schema(
                        type=openapi.TYPE_OBJECT,
                        properties={
                            'usuario': openapi.Schema(type=openapi.TYPE_OBJECT),
                            'actividad': openapi.Schema(type=openapi.TYPE_OBJECT)
                        }
                    )
                )
            )
        },
        tags=['Estad칤sticas']
    )
    def get_user_stats(self, request):
        """
        CU-CM06: Obtener estad칤sticas de actividad por usuario.
        """
        try:
            days = int(request.query_params.get('days', 30))
            days = min(days, 365)  # M치ximo 1 a침o
            
            # Usar servicio para obtener estad칤sticas por usuario
            user_stats = StatsService.get_user_activity_stats(days)
            
            # Auditor칤a
            self.log_audit_action(f"Consulta estad칤sticas por usuario - {days} d칤as")
            
            return Response({
                'periodo_dias': days,
                'total_usuarios': len(user_stats),
                'estadisticas_por_usuario': user_stats
            })
            
        except ValueError:
            return Response(
                {'error': 'El par치metro days debe ser un n칰mero entero'},
                status=status.HTTP_400_BAD_REQUEST
            )
        except Exception as e:
            return Response(
                {'error': f'Error al obtener estad칤sticas por usuario: {str(e)}'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    @swagger_auto_schema(
        operation_description="Comparar estad칤sticas entre per칤odos",
        operation_id='stats_comparison',
        manual_parameters=[
            openapi.Parameter(
                'period1_days',
                openapi.IN_QUERY,
                description="D칤as del per칤odo reciente (por defecto 7)",
                type=openapi.TYPE_INTEGER,
                default=7
            ),
            openapi.Parameter(
                'period2_days',
                openapi.IN_QUERY,
                description="D칤as del per칤odo anterior (por defecto 14)",
                type=openapi.TYPE_INTEGER,
                default=14
            )
        ],
        responses={
            200: openapi.Response(
                description='Comparaci칩n de per칤odos',
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'periodo_actual': openapi.Schema(type=openapi.TYPE_OBJECT),
                        'periodo_anterior': openapi.Schema(type=openapi.TYPE_OBJECT),
                        'cambios': openapi.Schema(type=openapi.TYPE_OBJECT)
                    }
                )
            )
        },
        tags=['Estad칤sticas']
    )
    def get_period_comparison(self, request):
        """
        CU-CM05: Comparar estad칤sticas entre dos per칤odos.
        """
        try:
            period1_days = int(request.query_params.get('period1_days', 7))
            period2_days = int(request.query_params.get('period2_days', 14))
            
            # Validar par치metros
            period1_days = min(period1_days, 90)  # M치ximo 3 meses
            period2_days = min(period2_days, 180)  # M치ximo 6 meses
            
            # Usar servicio para comparar per칤odos
            comparison = StatsService.get_period_comparison_stats(
                period1_days, 
                period2_days
            )
            
            # Auditor칤a
            self.log_audit_action(
                f"Comparaci칩n de per칤odos - P1: {period1_days} d칤as, P2: {period2_days} d칤as"
            )
            
            return Response(comparison)
            
        except ValueError:
            return Response(
                {'error': 'Los par치metros de per칤odo deben ser n칰meros enteros'},
                status=status.HTTP_400_BAD_REQUEST
            )
        except Exception as e:
            return Response(
                {'error': f'Error al comparar per칤odos: {str(e)}'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    @swagger_auto_schema(
        operation_description="Obtener estad칤sticas agrupadas por roles",
        operation_id='stats_roles',
        responses={
            200: openapi.Response(
                description='Estad칤sticas por rol',
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    additional_properties=openapi.Schema(
                        type=openapi.TYPE_OBJECT,
                        properties={
                            'total_usuarios': openapi.Schema(type=openapi.TYPE_INTEGER),
                            'usuarios_activos_mes': openapi.Schema(type=openapi.TYPE_INTEGER),
                            'total_acciones_mes': openapi.Schema(type=openapi.TYPE_INTEGER),
                            'promedio_acciones_por_usuario': openapi.Schema(type=openapi.TYPE_NUMBER)
                        }
                    )
                )
            )
        },
        tags=['Estad칤sticas']
    )
    def get_role_stats(self, request):
        """
        CU-CM06: Obtener estad칤sticas agrupadas por roles de usuario.
        """
        try:
            # Usar servicio para obtener estad칤sticas por rol
            role_stats = StatsService.get_role_based_stats()
            
            # Auditor칤a
            self.log_audit_action("Consulta estad칤sticas por roles")
            
            return Response({
                'fecha_consulta': request._request.META.get('HTTP_DATE', ''),
                'estadisticas_por_rol': role_stats,
                'resumen': {
                    'total_roles_analizados': len(role_stats),
                    'roles_con_actividad': len([
                        role for role, stats in role_stats.items() 
                        if stats['usuarios_activos_mes'] > 0
                    ])
                }
            })
            
        except Exception as e:
            return Response(
                {'error': f'Error al obtener estad칤sticas por roles: {str(e)}'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# Vistas adicionales para endpoints espec칤ficos usando decoradores
from django.urls import path
from rest_framework.decorators import api_view, permission_classes

@swagger_auto_schema(
    method='get',
    operation_description="Endpoint directo para estad칤sticas de usuarios",
    responses={200: "Estad칤sticas por usuario"}
)
@api_view(['GET'])
@permission_classes([permissions.AllowAny])
def user_stats_endpoint(request):
    """Endpoint directo para estad칤sticas por usuario"""
    view = StatsView()
    view.request = request
    return view.get_user_stats(request)

@swagger_auto_schema(
    method='get', 
    operation_description="Endpoint directo para comparaci칩n de per칤odos",
    responses={200: "Comparaci칩n de per칤odos"}
)
@api_view(['GET'])
@permission_classes([permissions.AllowAny])
def period_comparison_endpoint(request):
    """Endpoint directo para comparaci칩n de per칤odos"""
    view = StatsView()
    view.request = request
    return view.get_period_comparison(request)

@swagger_auto_schema(
    method='get',
    operation_description="Endpoint directo para estad칤sticas por roles", 
    responses={200: "Estad칤sticas por rol"}
)
@api_view(['GET'])
@permission_classes([permissions.AllowAny])
def role_stats_endpoint(request):
    """Endpoint directo para estad칤sticas por roles"""
    view = StatsView()
    view.request = request
    return view.get_role_stats(request)
